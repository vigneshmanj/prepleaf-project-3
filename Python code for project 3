import re
import heapq
from difflib import get_close_matches
from functools import lru_cache

class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    def search(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end_of_word

    def suggestions(self, word, max_dist=2):
        suggestions = []
        self._suggestions_recursive(self.root, word, "", max_dist, suggestions)
        suggestions.sort(key=lambda x: self._damerau_levenshtein_distance(x, word))
        return suggestions

    @lru_cache(maxsize=None)  # Memoization for performance improvement
    def _damerau_levenshtein_distance(self, s1, s2):
        if not s1:
            return len(s2)
        if not s2:
            return len(s1)

        cost = 0 if s1[-1] == s2[-1] else 1

        return min(
            self._damerau_levenshtein_distance(s1[:-1], s2) + 1,
            self._damerau_levenshtein_distance(s1, s2[:-1]) + 1,
            self._damerau_levenshtein_distance(s1[:-1], s2[:-1]) + cost,
            self._damerau_levenshtein_distance(s1[:-2], s2[:-2]) + cost  # Transposition
        )

class Autocorrect:
    def __init__(self):
        self.trie = Trie()

    def load_dictionary(self, filename):
        with open(filename, "r") as file:
            for line in file:
                word = line.strip()
                self.trie.insert(word)

    def correct_spelling(self, input_word, max_suggestions=5):
        input_word = re.sub(r'[^a-zA-Z]', '', input_word.lower())  # Remove non-alphabetic characters
        if self.trie.search(input_word):
            return f"{input_word} is a valid word."

        suggestions = self.trie.suggestions(input_word)
        close_matches = get_close_matches(input_word, suggestions, n=max_suggestions, cutoff=0.7)
        return f"Did you mean: {close_matches}?"

if __name__ == "__main__":
    autocorrect_app = Autocorrect()
    autocorrect_app.load_dictionary("path/to/your/dictionary.txt")

    while True:
        user_input = input("Enter a word (or 'exit' to quit): ").lower()
        
        if user_input == 'exit':
            break

        result = autocorrect_app.correct_spelling(user_input)
        print(result)
